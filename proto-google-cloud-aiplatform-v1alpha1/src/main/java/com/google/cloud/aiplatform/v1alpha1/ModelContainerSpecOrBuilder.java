/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/aiplatform/v1alpha1/model.proto

package com.google.cloud.aiplatform.v1alpha1;

public interface ModelContainerSpecOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:google.cloud.aiplatform.v1alpha1.ModelContainerSpec)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * Required. Immutable. The URI of the Model serving container file in the Container Registry. The
   * container image is ingested upon [ModelService.UploadModel][google.cloud.aiplatform.v1alpha1.ModelService.UploadModel], stored
   * internally, and this original path is afterwards not used.
   * </pre>
   *
   * <code>
   * string image_uri = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.field_behavior) = IMMUTABLE];
   * </code>
   *
   * @return The imageUri.
   */
  java.lang.String getImageUri();
  /**
   *
   *
   * <pre>
   * Required. Immutable. The URI of the Model serving container file in the Container Registry. The
   * container image is ingested upon [ModelService.UploadModel][google.cloud.aiplatform.v1alpha1.ModelService.UploadModel], stored
   * internally, and this original path is afterwards not used.
   * </pre>
   *
   * <code>
   * string image_uri = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.field_behavior) = IMMUTABLE];
   * </code>
   *
   * @return The bytes for imageUri.
   */
  com.google.protobuf.ByteString getImageUriBytes();

  /**
   *
   *
   * <pre>
   * Immutable. The command with which the container is run. Not executed within a shell.
   * The Docker image's ENTRYPOINT is used if this is not provided.
   * Variable references $(VAR_NAME) are expanded using the container's
   * environment. If a variable cannot be resolved, the reference in the input
   * string will be unchanged. The $(VAR_NAME) syntax can be escaped with a
   * double $$, ie: $$(VAR_NAME). Escaped references will never be expanded,
   * regardless of whether the variable exists or not.
   * More info:
   * https:
   * //kubernetes.io/docs/tasks/inject-data-a
   * //
   * pplication/define-command-argument-container/#running-a-command-in-a-shell
   * </pre>
   *
   * <code>repeated string command = 2 [(.google.api.field_behavior) = IMMUTABLE];</code>
   *
   * @return A list containing the command.
   */
  java.util.List<java.lang.String> getCommandList();
  /**
   *
   *
   * <pre>
   * Immutable. The command with which the container is run. Not executed within a shell.
   * The Docker image's ENTRYPOINT is used if this is not provided.
   * Variable references $(VAR_NAME) are expanded using the container's
   * environment. If a variable cannot be resolved, the reference in the input
   * string will be unchanged. The $(VAR_NAME) syntax can be escaped with a
   * double $$, ie: $$(VAR_NAME). Escaped references will never be expanded,
   * regardless of whether the variable exists or not.
   * More info:
   * https:
   * //kubernetes.io/docs/tasks/inject-data-a
   * //
   * pplication/define-command-argument-container/#running-a-command-in-a-shell
   * </pre>
   *
   * <code>repeated string command = 2 [(.google.api.field_behavior) = IMMUTABLE];</code>
   *
   * @return The count of command.
   */
  int getCommandCount();
  /**
   *
   *
   * <pre>
   * Immutable. The command with which the container is run. Not executed within a shell.
   * The Docker image's ENTRYPOINT is used if this is not provided.
   * Variable references $(VAR_NAME) are expanded using the container's
   * environment. If a variable cannot be resolved, the reference in the input
   * string will be unchanged. The $(VAR_NAME) syntax can be escaped with a
   * double $$, ie: $$(VAR_NAME). Escaped references will never be expanded,
   * regardless of whether the variable exists or not.
   * More info:
   * https:
   * //kubernetes.io/docs/tasks/inject-data-a
   * //
   * pplication/define-command-argument-container/#running-a-command-in-a-shell
   * </pre>
   *
   * <code>repeated string command = 2 [(.google.api.field_behavior) = IMMUTABLE];</code>
   *
   * @param index The index of the element to return.
   * @return The command at the given index.
   */
  java.lang.String getCommand(int index);
  /**
   *
   *
   * <pre>
   * Immutable. The command with which the container is run. Not executed within a shell.
   * The Docker image's ENTRYPOINT is used if this is not provided.
   * Variable references $(VAR_NAME) are expanded using the container's
   * environment. If a variable cannot be resolved, the reference in the input
   * string will be unchanged. The $(VAR_NAME) syntax can be escaped with a
   * double $$, ie: $$(VAR_NAME). Escaped references will never be expanded,
   * regardless of whether the variable exists or not.
   * More info:
   * https:
   * //kubernetes.io/docs/tasks/inject-data-a
   * //
   * pplication/define-command-argument-container/#running-a-command-in-a-shell
   * </pre>
   *
   * <code>repeated string command = 2 [(.google.api.field_behavior) = IMMUTABLE];</code>
   *
   * @param index The index of the value to return.
   * @return The bytes of the command at the given index.
   */
  com.google.protobuf.ByteString getCommandBytes(int index);

  /**
   *
   *
   * <pre>
   * Immutable. The arguments to the command.
   * The Docker image's CMD is used if this is not provided.
   * Variable references $(VAR_NAME) are expanded using the container's
   * environment. If a variable cannot be resolved, the reference in the input
   * string will be unchanged. The $(VAR_NAME) syntax can be escaped with a
   * double $$, ie: $$(VAR_NAME). Escaped references will never be expanded,
   * regardless of whether the variable exists or not.
   * More info:
   * https:
   * //kubernetes.io/docs/tasks/inject-data-a
   * //
   * pplication/define-command-argument-container/#running-a-command-in-a-shell
   * </pre>
   *
   * <code>repeated string args = 3 [(.google.api.field_behavior) = IMMUTABLE];</code>
   *
   * @return A list containing the args.
   */
  java.util.List<java.lang.String> getArgsList();
  /**
   *
   *
   * <pre>
   * Immutable. The arguments to the command.
   * The Docker image's CMD is used if this is not provided.
   * Variable references $(VAR_NAME) are expanded using the container's
   * environment. If a variable cannot be resolved, the reference in the input
   * string will be unchanged. The $(VAR_NAME) syntax can be escaped with a
   * double $$, ie: $$(VAR_NAME). Escaped references will never be expanded,
   * regardless of whether the variable exists or not.
   * More info:
   * https:
   * //kubernetes.io/docs/tasks/inject-data-a
   * //
   * pplication/define-command-argument-container/#running-a-command-in-a-shell
   * </pre>
   *
   * <code>repeated string args = 3 [(.google.api.field_behavior) = IMMUTABLE];</code>
   *
   * @return The count of args.
   */
  int getArgsCount();
  /**
   *
   *
   * <pre>
   * Immutable. The arguments to the command.
   * The Docker image's CMD is used if this is not provided.
   * Variable references $(VAR_NAME) are expanded using the container's
   * environment. If a variable cannot be resolved, the reference in the input
   * string will be unchanged. The $(VAR_NAME) syntax can be escaped with a
   * double $$, ie: $$(VAR_NAME). Escaped references will never be expanded,
   * regardless of whether the variable exists or not.
   * More info:
   * https:
   * //kubernetes.io/docs/tasks/inject-data-a
   * //
   * pplication/define-command-argument-container/#running-a-command-in-a-shell
   * </pre>
   *
   * <code>repeated string args = 3 [(.google.api.field_behavior) = IMMUTABLE];</code>
   *
   * @param index The index of the element to return.
   * @return The args at the given index.
   */
  java.lang.String getArgs(int index);
  /**
   *
   *
   * <pre>
   * Immutable. The arguments to the command.
   * The Docker image's CMD is used if this is not provided.
   * Variable references $(VAR_NAME) are expanded using the container's
   * environment. If a variable cannot be resolved, the reference in the input
   * string will be unchanged. The $(VAR_NAME) syntax can be escaped with a
   * double $$, ie: $$(VAR_NAME). Escaped references will never be expanded,
   * regardless of whether the variable exists or not.
   * More info:
   * https:
   * //kubernetes.io/docs/tasks/inject-data-a
   * //
   * pplication/define-command-argument-container/#running-a-command-in-a-shell
   * </pre>
   *
   * <code>repeated string args = 3 [(.google.api.field_behavior) = IMMUTABLE];</code>
   *
   * @param index The index of the value to return.
   * @return The bytes of the args at the given index.
   */
  com.google.protobuf.ByteString getArgsBytes(int index);

  /**
   *
   *
   * <pre>
   * Immutable. The environment variables that are to be present in the container.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.aiplatform.v1alpha1.EnvVar env = 4 [(.google.api.field_behavior) = IMMUTABLE];
   * </code>
   */
  java.util.List<com.google.cloud.aiplatform.v1alpha1.EnvVar> getEnvList();
  /**
   *
   *
   * <pre>
   * Immutable. The environment variables that are to be present in the container.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.aiplatform.v1alpha1.EnvVar env = 4 [(.google.api.field_behavior) = IMMUTABLE];
   * </code>
   */
  com.google.cloud.aiplatform.v1alpha1.EnvVar getEnv(int index);
  /**
   *
   *
   * <pre>
   * Immutable. The environment variables that are to be present in the container.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.aiplatform.v1alpha1.EnvVar env = 4 [(.google.api.field_behavior) = IMMUTABLE];
   * </code>
   */
  int getEnvCount();
  /**
   *
   *
   * <pre>
   * Immutable. The environment variables that are to be present in the container.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.aiplatform.v1alpha1.EnvVar env = 4 [(.google.api.field_behavior) = IMMUTABLE];
   * </code>
   */
  java.util.List<? extends com.google.cloud.aiplatform.v1alpha1.EnvVarOrBuilder>
      getEnvOrBuilderList();
  /**
   *
   *
   * <pre>
   * Immutable. The environment variables that are to be present in the container.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.aiplatform.v1alpha1.EnvVar env = 4 [(.google.api.field_behavior) = IMMUTABLE];
   * </code>
   */
  com.google.cloud.aiplatform.v1alpha1.EnvVarOrBuilder getEnvOrBuilder(int index);

  /**
   *
   *
   * <pre>
   * Immutable. Declaration of ports that are exposed by the container. This field is
   * primarily informational, it gives AI Platform information about the
   * network connections the container uses. Listing or not a port
   * here has no impact on whether the port is actually exposed, any port
   * listening on the default "0.0.0.0" address inside a container will be
   * accessible from the network.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.aiplatform.v1alpha1.Port ports = 5 [(.google.api.field_behavior) = IMMUTABLE];
   * </code>
   */
  java.util.List<com.google.cloud.aiplatform.v1alpha1.Port> getPortsList();
  /**
   *
   *
   * <pre>
   * Immutable. Declaration of ports that are exposed by the container. This field is
   * primarily informational, it gives AI Platform information about the
   * network connections the container uses. Listing or not a port
   * here has no impact on whether the port is actually exposed, any port
   * listening on the default "0.0.0.0" address inside a container will be
   * accessible from the network.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.aiplatform.v1alpha1.Port ports = 5 [(.google.api.field_behavior) = IMMUTABLE];
   * </code>
   */
  com.google.cloud.aiplatform.v1alpha1.Port getPorts(int index);
  /**
   *
   *
   * <pre>
   * Immutable. Declaration of ports that are exposed by the container. This field is
   * primarily informational, it gives AI Platform information about the
   * network connections the container uses. Listing or not a port
   * here has no impact on whether the port is actually exposed, any port
   * listening on the default "0.0.0.0" address inside a container will be
   * accessible from the network.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.aiplatform.v1alpha1.Port ports = 5 [(.google.api.field_behavior) = IMMUTABLE];
   * </code>
   */
  int getPortsCount();
  /**
   *
   *
   * <pre>
   * Immutable. Declaration of ports that are exposed by the container. This field is
   * primarily informational, it gives AI Platform information about the
   * network connections the container uses. Listing or not a port
   * here has no impact on whether the port is actually exposed, any port
   * listening on the default "0.0.0.0" address inside a container will be
   * accessible from the network.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.aiplatform.v1alpha1.Port ports = 5 [(.google.api.field_behavior) = IMMUTABLE];
   * </code>
   */
  java.util.List<? extends com.google.cloud.aiplatform.v1alpha1.PortOrBuilder>
      getPortsOrBuilderList();
  /**
   *
   *
   * <pre>
   * Immutable. Declaration of ports that are exposed by the container. This field is
   * primarily informational, it gives AI Platform information about the
   * network connections the container uses. Listing or not a port
   * here has no impact on whether the port is actually exposed, any port
   * listening on the default "0.0.0.0" address inside a container will be
   * accessible from the network.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.aiplatform.v1alpha1.Port ports = 5 [(.google.api.field_behavior) = IMMUTABLE];
   * </code>
   */
  com.google.cloud.aiplatform.v1alpha1.PortOrBuilder getPortsOrBuilder(int index);

  /**
   *
   *
   * <pre>
   * Immutable. An HTTP path to send prediction requests to the container, and which
   * must be supported by it. If not specified a default HTTP path will be
   * used by AI Platform.
   * </pre>
   *
   * <code>string predict_route = 6 [(.google.api.field_behavior) = IMMUTABLE];</code>
   *
   * @return The predictRoute.
   */
  java.lang.String getPredictRoute();
  /**
   *
   *
   * <pre>
   * Immutable. An HTTP path to send prediction requests to the container, and which
   * must be supported by it. If not specified a default HTTP path will be
   * used by AI Platform.
   * </pre>
   *
   * <code>string predict_route = 6 [(.google.api.field_behavior) = IMMUTABLE];</code>
   *
   * @return The bytes for predictRoute.
   */
  com.google.protobuf.ByteString getPredictRouteBytes();

  /**
   *
   *
   * <pre>
   * Immutable. An HTTP path to send health check requests to the container, and which
   * must be supported by it. If not specified a standard HTTP path will be
   * used by AI Platform.
   * </pre>
   *
   * <code>string health_route = 7 [(.google.api.field_behavior) = IMMUTABLE];</code>
   *
   * @return The healthRoute.
   */
  java.lang.String getHealthRoute();
  /**
   *
   *
   * <pre>
   * Immutable. An HTTP path to send health check requests to the container, and which
   * must be supported by it. If not specified a standard HTTP path will be
   * used by AI Platform.
   * </pre>
   *
   * <code>string health_route = 7 [(.google.api.field_behavior) = IMMUTABLE];</code>
   *
   * @return The bytes for healthRoute.
   */
  com.google.protobuf.ByteString getHealthRouteBytes();
}
